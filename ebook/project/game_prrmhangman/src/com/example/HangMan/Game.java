package com.example.hangman;import java.util.ArrayList;import java.util.Random;import android.app.Activity;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.view.KeyEvent;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;public class Game extends Activity {		public static String KEY_DIFFICULTY;	public static final String PREFS_NAME = "Hangman_pref";	TextView hiddenText;	TextView hintText;	TextView enteredText;	EditText input;	LinearLayout background;	Button backBtn;	Button newGameBtn;	// text variable holds String representation of the hidden word	String text;	// hint	String hint;	// holds a String of all letters already inputed by user	String entered = "";	//count of errors	int count;	//difficulty level	// 0 for easy	// 1 for medium	// 2 for hard	// -1 for Continue (loading saved data from previous game into main variables (text,	//entered, count)	int diff;	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.game);			//getting difficulty level		diff = getIntent().getIntExtra(KEY_DIFFICULTY, -1);		//getting new hidden word			String texthint = getText();		String[] pair = texthint.split("#");			text = pair[0];		hint = pair[1];			//assembling UI	hintText = (TextView)findViewById(R.id.hint_txt);	hintText.setText(hint);	hiddenText = (TextView)findViewById(R.id.hidden_txt);	hiddenText.setText(encodeString(text, "*"));	enteredText = (TextView)findViewById(R.id.entered_txt);	enteredText.setText(entered);	background = (LinearLayout)findViewById(R.id.background);	count = setDifficulty(diff); //setting count	//changeImage(count); // changing background		//setting input	input = (EditText)findViewById(R.id.input_txt);	input.setFocusable(true);	input.setOnKeyListener(new View.OnKeyListener() {			@Override	public boolean onKey(View v, int keyCode, KeyEvent event) {	String temp;	String newLetter = "&";	newLetter = input.getText().toString();	temp = (String)enteredText.getText();		if(temp.indexOf(newLetter.toUpperCase()) >= 0) {		//test for already entered text		input.setText("");		return false;	}		input.setText(""); //clearing input	entered += newLetter.toUpperCase(); //adding inputed letter to the view		enteredText.setText(temp + newLetter.toUpperCase());	hiddenText.setText(encodeString(text, newLetter.toUpperCase()));	//checking for win case	if(win(text)) {		Toast.makeText(getApplicationContext(),				"Congratulations!\n\tYou won!", Toast.LENGTH_LONG).show();				input.setFocusable(false);				new AlertDialog.Builder(Game.this).setTitle("Select Difficulty")				.setItems(R.array.difficulty, new DialogInterface.OnClickListener()				{						public void onClick(DialogInterface dialoginterface, int i) {							startGame(i);						}				})				.show();				//changeImage(999);	}	//if not found in the hidden word decrement count	if(text.indexOf(newLetter.toUpperCase()) == -1) {		count--;		Toast.makeText(getApplicationContext(), "Sorry Wrong Guess", Toast.LENGTH_SHORT).show();	//changeImage(count); //also change background (draw new	//part)	}	//game over if there is no chances left	if(count == 0) {		Toast.makeText(getApplicationContext(), "Game Over",Toast.LENGTH_LONG).show();		hiddenText.setText(encodeString(text, "#")); 		input.setFocusable(false); //no more guesses	}	return false;	}	});	backBtn = (Button)findViewById(R.id.back_button);	backBtn.setOnClickListener(new View.OnClickListener() {		@Override		public void onClick(View v) {			finish();		}	});		newGameBtn = (Button)findViewById(R.id.new_game_button);	newGameBtn.setOnClickListener(new View.OnClickListener() {	//creating new Game		@Override		public void onClick(View v) {				Toast.makeText(getApplicationContext(), "Starting a New Game",Toast.LENGTH_SHORT).show();				try {					Thread.sleep(2000);				} catch (InterruptedException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				new AlertDialog.Builder(Game.this).setTitle("Select Difficulty")					.setItems(R.array.difficulty, new DialogInterface.OnClickListener()					{							public void onClick(DialogInterface dialoginterface, int i) {								startGame(i);							}					})					.show();		}	});}		@Override		protected void onResume() {			super.onResume();		}		@Override		protected void onPause() {			super.onPause();			// Save the current game			String old_entered = this.entered;			String old_text = this.text;			String old_hint = this.hint;			int old_count = this.count;			SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);			SharedPreferences.Editor editor = settings.edit();			editor.putString("old_text", old_text);			editor.putString("old_entered", old_entered);			editor.putString("old_hint", old_hint);			editor.putInt("old_count", old_count);			editor.commit();			getIntent().putExtra(KEY_DIFFICULTY, -1);	//putting diff to -1 ensures that if Game pauses it will start from the saved state	}	private String encodeString( String target, String letter) {		String result = "";		if(letter.contains("*")) { //this case will completely hide all letters				for(int i = 0; i < target.length(); i++) {						result += "_ "; //there is a space bar between the letters				}				return result;		}		else if(letter.contains("#")) { //this case will open all letters (happens when			//user losses a game			for(int i = 0; i < target.length(); i++) {					result += target.charAt(i) + " ";			}			return result;		}		else { //this case will open all instances of the correct letter				for(int i = 0; i < target.length(); i++) {						if(target.charAt(i) == letter.charAt(0)) {								result += target.charAt(i) + " ";						}						else if(entered.indexOf(target.charAt(i)) != -1) {								result += target.charAt(i) + " ";						}						else								result += "_ ";				}				return result;		}	}	private boolean win(String text) {		if(text.length() > 0 && entered.length() > 0) {			for(int i = 0; i < text.length(); i++) {				if(entered.indexOf(text.charAt(i)) == -1) {					return false;				}			}			return true;		}		return false;	}/*	private void changeImage(int count) {	switch (count) {	case 6:	background.setBackgroundResource(R.drawable.game0);	break;	case 5:	background.setBackgroundResource(R.drawable.game1);	break;	case 4:	background.setBackgroundResource(R.drawable.game2);	break;	case 3:	background.setBackgroundResource(R.drawable.game3);	break;	case 2:	background.setBackgroundResource(R.drawable.game4);	break;	case 1:	background.setBackgroundResource(R.drawable.game5);	break;	case 0:	background.setBackgroundResource(R.drawable.gamefinal);	break;	case 999:	background.setBackgroundResource(R.drawable.gamewin);	break;	default:	background.setBackgroundResource(R.drawable.game0);	break;	}	}*/	private int setDifficulty(int dif) {	switch(dif) {	case -1:	//diff is -1 load saved data		SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);		String old_text = settings.getString("old_text", text);		String old_entered = settings.getString("old_entered", "");		String old_hint = settings.getString("old_hint", hint);		int old_count = settings.getInt("old_count", 6);		this.text = old_text;		this.entered = old_entered;		this.count = old_count;		this.hint = old_hint;		enteredText.setText(entered);		hintText.setText(hint);		if(entered.length() > 0) {			for(int i = 0; i < entered.length(); i++) {				hiddenText.setText(encodeString(text, entered.charAt(i) + ""));			}		}		//changeImage(count);		return count;	case 0:		return 6;	case 1:		return 5;	case 2:		return 4;	default:		return 6;	}	}		private String getText() {		String result = "FLORIDA#USA";		// all hidden words		ArrayList<String> words = new ArrayList<String>();	words.add("FLORIDA#USA");	words.add("MINNEAPOLIS#USA");	words.add("PHILADELPHIA#USA");	words.add("INDIANAPOIS#USA");	words.add("JAKSONVILLE#USA");	words.add("WASHINGTON#USA");	words.add("SACRAMENTO#USA");	words.add("CAMBRIDGE#USA");	words.add("AFGHANISTAN#Country");	words.add("BAHAMAS#Country");	words.add("CAMBODIA#Country");	words.add("GERMANY#Country");	words.add("UZBEKISTAN#Country");	words.add("MOZAMBIQUE#Country");	words.add("BRASILIA#Capital City");	words.add("OTTAWA#Capital City");	words.add("MOSCOW#Capital City");	words.add("KINGSTON#Capital City");	words.add("MONROVIA#Capital City");	words.add("ISLAMABAD#Capital City");	words.add("AMAZON#River");	words.add("YENISEI#River");	words.add("MEKONG#River");	words.add("MISSISSIPPI#River");	words.add("TOCANTINS#River");	words.add("COLORADO#River");	words.add("VOLGA#River");	words.add("EVEREST#Mountain");	words.add("LHOTSE#Mountain");	words.add("MAKALU#Mountain");	words.add("ELBRUS#Mountain");	words.add("KILIMANJARO#Mountain");	words.add("ANNAPURNA#Mountain");	words.add("ANAMUDI#Mountain");	words.add("MANAT#Currency");	words.add("DINAR#Currency");	words.add("AFGHANI#Currency");	words.add("KORUNA#Currency");	words.add("POUND#Currency");	words.add("SHILLING#Currency");	words.add("WINNIPEG#Lake");	words.add("MICHIGAN#Lake");	words.add("BAIKAL#Lake");	words.add("VICTORIA#Lake");	words.add("ISSYKKUL#Lake");	words.add("NIPIGON#Lake");	words.add("MANITOBA#Lake");	words.add("FEDMONTON#Canada");	words.add("CAMROSE#Canada");	words.add("CALGARY#Canada");	words.add("WETASKIVIN#Canada");	words.add("AIRDRIE#Canada");	words.add("LANGLEY#Canada");	words.add("ZAPOPAN#Mexico");	words.add("MONTERREY#Mexico");	words.add("TOLUCA#Mexico");	words.add("CANCUN#Mexico");	words.add("VERACRUZ#Mexico");	words.add("URUAPAN#Mexico");	words.add("MACUSPANA#Mexico");		Random generator = new Random();	int randomIndex = generator.nextInt( words.size() );	result = words.get(randomIndex);	return result;	}	private void startGame(int i) {		Intent intent = new Intent(Game.this, Game.class);		intent.putExtra(Game.KEY_DIFFICULTY, i);		finish();		startActivity(intent);	}	}	